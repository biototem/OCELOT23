import json
from typing import List, Tuple

import numpy as np
import matplotlib.pyplot as plt

from basic import join, config
from utils.table.my_table import Table


def main():
    # 基础配置
    CLASS_NAMES = config['evaluate.class_names']
    root = r'/media/totem_disk/totem/jizheng/ocelot2023/output/v1-2/'
    # 加载评分表
    score_table = Table.load(path=join(root, 'evaluate.txt'), dtype=object)
    score_table = score_table['auto-save-epoch-29',]
    # 加载分组信息
    with open(join(root, 'key_set.txt'), 'r') as f:
        key_set = f.read()
        key_set = json.loads(key_set)

    # 加载 organ 信息
    ogs, organ_set = organs()

    # 图片 ID
    data_keys = score_table.keys[0]

    # 逐模型
    idx = 0
    for organ in ogs:
        idx += 1
        plt.subplot(len(ogs), 1, idx)
        plt.title(organ, x=1.05, y=0.5)
        for group, color in zip(config['evaluate.target_group'], ['g', 'y', 'r']):
            plt.grid(visible=True, axis='y')
            # 图片各自分类
            samples = [k for k in data_keys if k in key_set and key_set[k] == group and organ_set[k] == organ]
            print(f' -> organ {organ} -- group {group} -- {samples}')

            samples = [x for _, x in score_table[samples, 'dice'].data.tolist()]

            # samples = [x for x in score_table[samples, 'dice_mix'].data.tolist()]

            samples.sort(reverse=True)

            plt.plot(np.arange(len(samples)) / (len(samples) - 1), samples, color=color)

        plt.xticks([i / 10 for i in range(11)])
        plt.yticks([i / 10 for i in range(11)])

    plt.show()


message = """
kidney
['023', '044', '008', '094', '045', '093', '025', '009', '065', '001', '076', '062', '103', '098', '087', '090', '049', '073', '086', '100', '067', '097', '015', '002', '038', '119', '064', '120', '043', '112', '072', '022', '099', '046', '053', '068', '012', '075', '057', '066', '056', '101', '069', '092', '004', '084', '052', '050', '039', '021', '016', '070', '018', '032', '108', '114', '058', '029', '003', '122', '027', '010', '113', '047', '081', '104', '020', '116', '054', '059', '085', '088', '115', '040', '042', '071', '111', '107', '014', '030', '017', '051', '118', '080', '110', '105', '078', '005', '091', '019', '063', '033', '117', '079', '035', '106', '013']
['034', '060', '095', '041', '077', '006', '048', '036', '082', '061', '083', '055', '109', '011', '089', '028', '037', '007', '024', '102', '096', '031', '074', '121', '026']
endometrium
['148', '189', '159', '137', '169', '165', '185', '198', '183', '166', '193', '153', '134', '181', '151', '186', '132', '161', '147', '157', '127', '163', '155', '201', '125', '164', '177', '171', '123', '131', '145', '196', '173', '191', '138', '204', '154', '190', '156', '184', '208', '142', '130', '179', '197', '126', '139', '146', '194', '158', '176', '174', '180', '199', '192', '167', '200', '207', '172', '160', '136', '202', '175', '188', '195', '144']
['206', '178', '162', '141', '128', '135', '182', '203', '170', '124', '133', '168', '143', '150', '187', '205', '149', '129', '140']
bladder
['209', '263', '242', '246', '228', '266', '247', '249', '216', '212', '258', '239', '286', '226', '215', '276', '243', '222', '229', '245', '224', '254', '235', '253', '233', '240', '260', '278', '277', '227', '231', '280', '269', '282', '211', '264', '220', '274', '259', '234', '213', '217', '271', '289', '265', '255', '287', '221', '214', '230', '250', '275', '225', '288', '256', '290', '244', '232', '210', '262', '219', '238', '261', '284']
['283', '279', '285', '248', '281', '241', '267', '237', '236', '268', '257', '252', '273', '223', '272', '251', '270', '218']
prostate
['313', '326', '309', '323', '297', '310', '308', '299', '320', '321', '301', '337', '296', '318', '293', '315', '325', '291', '307', '322', '329', '331', '336', '312', '305', '300', '302', '292', '334', '333', '306', '327', '311', '303', '330', '298']
['314', '294', '304', '328', '332', '335', '324', '317', '295', '316', '319']
stomach
['344', '339', '340', '351', '338', '358', '368', '367', '350', '352', '361', '342', '369', '354', '372', '357', '366', '349', '360', '353', '356', '355', '346', '371', '341', '365', '343']
['363', '347', '359', '364', '362', '348', '345', '370', '373']
head-and-neck
['387', '390', '391', '394', '388', '383', '380', '374', '385', '389', '379', '384', '392', '377', '386', '398', '397', '375', '378', '395']
['400', '396', '382', '376', '381', '399', '393']
"""


def organs() -> Tuple[list, dict]:
    ogs = []
    og_set = {}
    lines = message.strip().split('\n')
    for index in range(0, len(lines), 3):
        organ = lines[index]
        train = json.loads(lines[index + 1].replace('\'', '\"'))
        valid = json.loads(lines[index + 2].replace('\'', '\"'))
        for code in train + valid:
            og_set[code] = organ
        ogs.append(organ)
        print(organ, len(train + valid))
    return ogs, og_set


main()
# organs()
